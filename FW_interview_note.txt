//!*****************************************************************************
//! Subject: 韌體工程師面試建議準備方向
//! Description: 整理一些面試韌體工程師要準備的項目，屬於個人經驗分享，提供參考。
//!
//!                                                           Author: Neil Lin
//!                                                      Last update: 2024.12.12
//!*****************************************************************************
//----------------------------------------------------------------------------//
//  準備項目
//----------------------------------------------------------------------------//
//
// Coding
//
1. 資料結構
   • 必考: array、linked list、stack and queue
   • Others: binary tree、hash table (雖然不是必考，但還是很重要，除非真的已經沒時間準備了，不然還是強烈建議都要學會。
                                      面試韌體不會考graph，所以可以不用會沒關係)
   • 我整理的一些白板題解法: https://github.com/NeilLin603/whiteboard_questions

2. 演算法
   • 必考: sorting、binary search
   • 老掉牙的題目(費氏數列比較常考，剩下的有空當興趣練習即可): https://openhome.cc/zh-tw/algorithm
     考費氏數列實作，直接用迭代法解最快: https://github.com/NeilLin603/algorithms/blob/main/2_fibonacci_sequence.c

3. 程式輸出觀念題
   • F/W面試很多從這裡出來，因為題目量真的蠻多的，刷不完沒關係，但有時間就盡量多刷一點(建議答案都先遮住，自己實際想過結果，再去對答案):
     https://www.geeksforgeeks.org/c-multiple-choice-questions/

4. Leetcode
   • 面試韌體職缺，leetcode沒有非刷不可，假如面試時間已經迫在眉睫，直接找考古題刷就好，那時會比還去刷leetcode有效。
     但如果距離面試還有比較長的準備時間，建議有空還是多練習寫一些題目，可以提升coding的基本功並建立解題的靈敏度。
   • 先從Top Interview 150裡的以下主題練習，有多的時間再練LeetCode 75 (一樣找相關主題練習)，個人認為對面試韌體缺來說已經蠻夠的了。
     1) 主要練習的主題(每個主題建議都要練)
        - Array / String
        - Two Pointers
        - Stack
        - Linked List
        - Binary Search
        - Bit Manipulation
     2) 次要練習的主題(依照我認為的優先順序排序)
        - Hashmap
        - Binary Tree General
        - Math
        - Divide & Conquer
        - Binary Tree BFS、Binary Search Tree
   • 以下是我寫的一些解法，供參考:
     https://github.com/NeilLin603/leetcode

//
// OS
//
筆試題或口頭提問會考到，基本上不會考到太深，把課上過就差不多了。
推薦清大周志遠教授開放式課程:
1. 上課影片: https://ocw.nthu.edu.tw/ocw/index.php?page=course&cid=141
2. 上課講義: https://ocw.nthu.edu.tw/ocw/index.php?page=course_news_content&cid=141&id=999
3. 有更多時間的話，可以購買上課指定用書來閱讀: Silberschatz's Operating System Concepts (俗稱的恐龍本)

//
// 考古題
//
前幾家IC設計公司，網路上都找得到一些考古資源，或是去找面試過的人要，就是面哪間刷哪間。
以下稍微整理幾個MTK考古資源，可以參考當作練習:
1. https://hackmd.io/@eDfExJ5ITHS5BfBQq0DRyg/BJ1jZ184v#Q1--Explain-%E2%80%9Cerror%E2%80%9D-
2. https://hackmd.io/@Rance/SkSJL_5gX
3. https://hackmd.io/@accdlab/SJjIvoLTu

//
// Project Report
//
1. PPT準備: 內容大概包含1頁自我介紹 + 2-3頁介紹2-3個主題(每個主題1頁就好，圖太多實在放不下就最多2頁，再多面試主管可能會看得不耐煩)。
2. 報告方式: 如果不知道怎麼有系統性地介紹每個主題，可以採用"STAR原則"去做說明。當然如果有自己的介紹方式，也不一定要遵照這個原則。

//----------------------------------------------------------------------------//
//  準備建議
//----------------------------------------------------------------------------//
1. 建議準備面試的study plan:
   • Long-term (面試前半年以上): Leetcode、OS
   • Mid-term (面試前三個月): 程式輸出觀念題、演算法的必考題(期間可以複習long-term schedule的內容，例如把寫過的leetcode題目重寫一次，
                             然後跟上次寫的code比較，很常會寫出比上次更優化的寫法、複習OS或是把還沒上完的課上完)
   • Short-term (面試前一個月): 考古題、Project Report (期間"一定"要複習mid-term schedule的內容)
   (資料結構沒有列上去，因為不管距離面試什麼時間點開始準備，都是要在最一開始就學會的基本技能)

2. 最後是心態上的建議，面試得失心不要太重，因為就算已經準備得很充分，能力上也都沒什麼問題，最後還是有可能因為種種因素被刷掉
   (可能其他面試者也準備得很充分，但他血統比較好、或是你behavior questions講了什麼面試官不喜歡的回答、又或者面試官單純看你不順眼...等等，都有可能把你刷掉)
   所以如果真的沒上就把它當作練習的經驗，不要太影響心情。祝面試順利~
